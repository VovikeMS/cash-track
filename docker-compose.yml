version: '2'

services:

# Applications Code Container

    source:
      image: tianon/true
      volumes:
        - ./backend:/var/www

### Workspace Utilities Container

    workspace:
      build:
        context: ./workspace
        args:
          - APP_PRODUCTION=${APP_PRODUCTION}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
      image: finance/workspace
      volumes_from:
        - source
      volumes:
        - ./logs/cron.log:/var/log/cron-job.log
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      networks:
        - frontend
        - backend

# PHP-FPM Container

    php-fpm:
      build:
        context: ./backend
        args:
          - APP_PRODUCTION=${APP_PRODUCTION}
      image: finance/php-fpm
      volumes_from:
        - source
      volumes:
        - ./backend/config/php.ini:/usr/local/etc/php/php.ini
      expose:
        - "9000"
      depends_on:
        - workspace
      networks:
        - backend

# NGINX Server Container

    web:
      build:
        context: ./web
      image: finance/web
      volumes_from:
        - source
      volumes:
        - ./logs/nginx:/var/log/nginx
        - ./web/host.conf:/etc/nginx/sites-available/host.conf
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### MySQL Container

    database:
      build:
        context: ./database
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      image: finance/database
      volumes:
        - ./database/data:/var/lib/mysql
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### Redis Container

    cache:
      build: ./cache
      image: finance/cache
      volumes:
        - ./cache/data:/data
      ports:
        - "${REDIS_PORT}:6379"
      networks:
        - backend


### Networks Setup

networks:
    frontend:
      driver: "bridge"
    backend:
      driver: "bridge"

### Volumes Setup

volumes:
  mysql:
    driver: "local"
  redis:
    driver: "local"